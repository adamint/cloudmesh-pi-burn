#! /usr/bin/env python
"""Cloudmesh Raspberry Pi Mass Image Burner.

Usage:
  cm-burn create --group GROUP --names HOSTS [--key KEY] --image IMAGE --ip IPS --bootdrive BOOTDRIVE --rootdrive ROOTDRIVE
  cm-burn ls
  cm-burn rm IMAGE
  cm-burn get [URL]
  cm-burn update
  cm-burn (-h | --help)
  cm-burn --version
Options:
  -h --help     Show this screen.
  --version     Show version.
Files:
  This is not fully thought through and needs to be documented
  ~/.cloudmesh/images
  ~/.cloudmesh/inventory
  Location where the images will be stored for reuse
Description:
  cm-burn create --names HOSTS [--key KEY] --image IMAGE --bootdrive BOOTDRIVE --rootdrive ROOTDRIVE --ssid SSID --psk PSK
  cm-burn update
        updates the downloaded images if new once are available
  cm-burn ls
        lists the downloaded images
  cm-burn rm IMAGE
        remove the image
  cm-burn get URL
        downloads the image at the given URL
  cm-burn get jessie
        abbreviation to download a specific version of an image.
        Identify what woudl be useful.
Example:
  cm-burn create --names red[000-010] --key idrsa.pub --image rasbian_latest
"""
import os
import subprocess
from docopt import docopt
import hostlist
from prompter import yesno
import platform
import wget
from pathlib import Path

VERSION = "0.1"
debug = True

columns, lines = os.get_terminal_size()

IMAGE_DIR=os.path.expanduser("images")
BOOT_DIR =''

def print_function_name(func):
    def echo_func(*func_args, **func_kwargs):
        print('')
        print(columns * '-')
        print('Executing {}'.format(func.__name__))
        print(columns * '-')
        return func(*func_args, **func_kwargs)

    return echo_func

def execute(commands):
    lines = commands.split("\n")
    for line in lines:
        #os.system(line)
        print(line)
        proc = subprocess.Popen(line, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        while proc.poll() is None:         
         print(proc.stdout.readline()) #give output from your execution/your own message
        #self.commandResult = proc.wait() #catch return code

@print_function_name
def get(image):
    print(image)
    if not os.path.exists(IMAGE_DIR):
        os.makedirs(IMAGE_DIR)
    if image is None:
        image = "https://downloads.raspberrypi.org/raspbian_latest"
   # script = """
    #cd {dir}
    #""".format(dir=os.getcwd() + '\\' + IMAGE_DIR)
    #print(script)
    os.chdir(IMAGE_DIR)
    print(image[0])
    wget.download(image[0])


@print_function_name
def rm(image):
    print(image)

@print_function_name
def ls():
    script = """
    ls  -1 {dir}
    """.format(dir=IMAGE_DIR)
    execute(script)

class piburner (object):

    def __init__ (self):
        pass

    def image(self, imagepath):
        # set the image
        pass
 
    def device(self, devicename):
        # set the device
        pass

    def burn(self):
       # burn image opython device
       #if not os.path.exists(IMAGE_DIR):
       # os.makedirs(IMAGE_DIR)
       script = """{dir}\\CommandLineDiskImager\\CommandLineDiskImager.exe {dir}\\images\\2018-06-27-raspbian-stretch.img E
       """.format(dir=os.getcwd())
       print(script)
       execute(script)
       
    def unmountdrive(self, rootdrive):
        #Remove drive in windows
        script = """RemoveDrive {drive}:""".format(drive = rootdrive)
        execute(script)

    def hostname(self, host, rootdrive):
        # set the hostname 
        self.host = host
        #wr = open(Path("I:/etc/") / "hostname", 'w+')
        #wr.write(host)
        Path(rootdrive + ":/etc/hostname").write_text(host)
        print(self.host)
        
	
    def key(self, keypath, rootdrive, bootdrive):
        # set the keypath
        self.keypath = keypath
        print(self.keypath)   
        #enable ssh by creating a ssh file in the boot folder
        #f= open("G:\\ssh","w+") 
        open(Path(bootdrive + ":/") / "ssh", 'w+')
        #Create directory .ssh
        Path(rootdrive + ":/home/pi/.ssh").mkdir(parents=True, exist_ok=True)
        #execute(script)
        #Read contents of the ssh rsa file 
        content =  Path(keypath).read_text()
        #with open(keypath, 'r') as content_file:
        #    content = content_file.read()
        #Write the content of the ssh rsa to the authorized_keys file
        Path(rootdrive + ":/home/pi/.ssh/authorized_keys").write_text(content)
        #wr = open(Path("I:/home/pi/.ssh") / "authorized_keys", 'w+')
        #wr.write(content)
        
    def wifi(self,ssid,psk, rootdrive):
        #set wifi
        wifi = """ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev 
update_config=1 
country=US

network={{
        ssid=\"{network}\"
        psk=\"{pwd}\"
        key_mgmt=WPA-PSK
}}""".format(network=ssid,pwd=psk)
        print(wifi)
        
        Path(rootdrive + ":/etc/wpa_supplicant/wpa_supplicant.conf").write_text(wifi)
        #wr = open(Path("I:/etc/wpa_supplicant/") / "wpa_supplicant.conf", 'w+')
        #wr.write(wifi)
    
    def ip(self, ipaddress):
        # set ip
        pass


@print_function_name
def create(names, key, bootdrive, rootdrive, ssid, psk):   
    hosts = hostlist.expand_hostlist(names)
    #print(hosts, key)
    burner = piburner()
    #burner.key(key)
    
    for host in hosts:
        print(columns * '-')
        print ("Burning", host)
        #break
        print(columns * '-')
        yesno('Please insert the card for ' + host + "(y)?")
        print("wait till its recognized")
        print("once in conformation proceed")
        
        #burner.burn()
        print("burn")        
        
        burner.hostname(host, rootdrive)
        print("Updating host")  
        
        print("ssid - {id}".format(id=ssid))
        print("psk - {pwd}".format(pwd=psk))
        burner.wifi(ssid, psk, rootdrive)
        print("Updating wifi")  
        
        burner.key(key, rootdrive, bootdrive)
        print("Updating ssh")
        
        burner.unmountdrive(rootdrive)
        print("Removed drive")
        print("Please remove the card for host", host)
        yesno("Press y once the card is removed")

        print("take the card out")
        break
   
    
    
    
def analyse():    
    if arguments["rm"]:
        rm(arguments["image"])
    elif arguments["get"]:
        print(arguments["URL"])
        get(arguments["URL"])
    elif arguments["ls"]:
        ls()
    elif arguments["rm"]:
        rm(arguments["IMAGE"])
    elif arguments["create"]:
        create(arguments["HOSTS"], arguments["KEY"], arguments["BOOTDRIVE"],arguments["ROOTDRIVE"], arguments["SSID"], arguments["PSK"])
if __name__ == '__main__':
    arguments = docopt(__doc__, version=VERSION)
    print('test')
    #if debug:
    #   print(arguments) # just for debugging
    analyse()